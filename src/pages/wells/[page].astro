---
import type { GetStaticPathsResult, PaginateFunction, Page } from 'astro';
import BaseLayout from '../../layouts/BaseLayout.astro';
import WellCardWithModal from '../../components/WellCardWithModal.astro';
import Pagination from '../../layouts/components/Pagination.astro';
import { Image } from 'astro:assets';
import fs from 'fs';
import csv from 'csv-parser';
import { pipeline } from 'node:stream/promises';

export async function getStaticPaths({
    paginate,
}: {
    paginate: PaginateFunction;
}): Promise<GetStaticPathsResult> {
    const wellsPerPage = 20;

    const wellsThumbnails: ImageMetadata[] = await Astro.glob(
        '../../assets/img/wells/thumbnails/*.webp'
    );
    const wellsFull: ImageMetadata[] = await Astro.glob(
        '../../assets/img/wells/full/*.webp'
    );

    // get names from csv file
    const wellOwnerNames: any = [];
    await new Promise<void>((resolve) =>
        fs
            .createReadStream('./src/assets/wellOwnerNames.csv')
            .pipe(csv())
            .on('data', (row) => {
                // 2. sütunun değerini al ve diziye ekle
                if (row['user']) {
                    wellOwnerNames.push(row['user']);
                }
            })
            .on('end', () => {
                resolve();
                console.log(
                    'wellOwnerNames imported: ' + wellOwnerNames.length
                );
            })
    );

    // Generate pages from our wells arrays, with merged names
    return paginate(
        wellsThumbnails.map((well: any, index: number) => {
            return {
                wellThumbnailImage: well.default,
                wellsFullImage: wellsFull[index],
                wellOwnerName: wellOwnerNames[index],
            };
        }),
        { pageSize: wellsPerPage }
    );
}

interface Props {
    page: Page;
}
const { page } = Astro.props;

// translations
import translations, {
    convertPageTitle,
    localeLink,
} from '../../utils/translationTools';
const t = translations(Astro.url);

let calculateWellNumber = (index: number) =>
    (page.currentPage === 1 ? 0 : (page.currentPage - 1) * page.size) +
    index +
    1;
---

<BaseLayout
    title={convertPageTitle(t.wells, t.title)}
    description={t.description}
>
    <h1 class="text-white text-center mb-4">{t.wells}</h1>
    {
        page.currentPage === 1 && (
            <p class="text-white col-11 col-lg-8 m-auto mb-4 bg-dark rounded-3 p-3">
                {t.waterWellsText}
            </p>
        )
    }
    <div class="container">
        <Pagination page={page} type="start" />

        <div class="mb-3">
            <div
                class="row align-items-center justify-content-center gx-3 gy-3 m-0 align-items-stretch"
            >
                {
                    page.data.map(
                        (
                            {
                                wellThumbnailImage,
                                wellsFullImage,
                                wellOwnerName,
                            }: any,
                            index: number
                        ) => (
                            <WellCardWithModal
                                thumbnailImage={wellThumbnailImage}
                                fullImage={wellsFullImage.default}
                                wellNumber={calculateWellNumber(index)}
                                wellOwnerName={wellOwnerName}
                            />
                        )
                    )
                }
            </div>
        </div>

        <Pagination page={page} type="end" />
    </div>
</BaseLayout>
